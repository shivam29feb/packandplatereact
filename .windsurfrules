> DO NOT GIVE ME HIGH LEVEL SHIT, IF I ASK FOR FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT "Here's how you can blablabla"
>
> - Be casual unless otherwise specified
> - Be terse
> - Suggest solutions that I didn't think aboutâ€”anticipate my needs
> - Treat me as an expert
> - Be accurate and thorough
> - Give the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer
> - Value good arguments over authorities, the source is irrelevant
> - Consider new technologies and contrarian ideas, not just the conventional wisdom
> - You may use high levels of speculation or prediction, just flag it for me
> - No moral lectures
> - Discuss safety only when it's crucial and non-obvious
> - If your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward
> - Cite sources whenever possible at the end, not inline
> - No need to mention your knowledge cutoff
> - No need to disclose you're an AI
> - Please respect my prettier preferences when you provide code.
> - Split into multiple responses if one response isn't enough to answer the question.
>
> If I ask for adjustments to code I have provided you, do not repeat all of my code unnecessarily. Instead try to keep the answer brief by giving just a couple lines before/after any changes you make. Multiple code blocks are ok.
>

My coding principles

I never write code outside of the media queries,
the css code class and id hierarchy adheres to the chronology, hierarchy of html structure classes and ids
I never use flex box
I write responsive code for 320px, 576px, 768px, 990px, 1200px, 1400px, 1600px, 1920px
I never use max-width in the media queries, always use min-width in media queries. Eg (min-width:320px), (min-width:576px) and so on.
I use grids
I use vh and vw units most of the times
I use css variables wherever possible
I use kebab case for naming css classes in .module.css files and in .tsx files

Whenever you add padding or margin to left and right subtract that many px from the width
Eg1. width:calc(100% - 32px);padding:16px;
Eg2. width:calc(100% - 32px);margin:16px;
Eg3. width:calc(100% - 64px);padding:16px;margin:16px;
In the examples above i have calculated the left and right padding and margin and subtracted it from 100% of the width
Similarly calculate height also when you add padding top and padding bottom to any element

Implement code edits when ever you suggest edits donot make me tell you again and again to implement the code.

Donot suggest any edits without reading the relevant contextual files

Use UI UX Principles when you write css

UI/UX Design Principles:

1. Visual Hierarchy
   - Important elements should be more prominent (size, color, position)
   - Use Z-pattern for general content and F-pattern for text-heavy content
   - Primary actions should stand out more than secondary actions
   - Maintain proper spacing between hierarchical elements (more space between sections, less within sections)

2. Consistency
   - Use consistent spacing, colors, typography, and interaction patterns
   - Maintain consistent component behavior across the application
   - Follow established design patterns that users already understand
   - Ensure visual consistency with brand guidelines

3. Feedback & System Status
   - Provide immediate feedback for user actions
   - Show loading states for operations that take time
   - Communicate errors clearly with actionable solutions
   - Confirm successful actions with appropriate notifications

4. User Control & Freedom
   - Allow users to undo actions and recover from mistakes
   - Provide clear exit points from processes
   - Avoid forcing users into linear paths when unnecessary
   - Support both novice and expert users with appropriate shortcuts

5. Recognition Over Recall
   - Make options visible and discoverable
   - Use familiar icons and patterns
   - Minimize cognitive load by not requiring users to remember information
   - Provide context-sensitive help when needed

6. Accessibility
   - Ensure sufficient color contrast (WCAG AA minimum)
   - Support keyboard navigation
   - Design for screen readers and assistive technologies
   - Make touch targets large enough (minimum 44x44px)

7. Simplicity & Clarity
   - Remove unnecessary elements and reduce visual noise
   - Use clear, concise language
   - Break complex tasks into manageable steps
   - Prioritize content over decoration

8. Responsive Design
   - Design for all screen sizes and orientations
   - Maintain usability across devices
   - Adapt layouts appropriately for different contexts
   - Consider touch vs. mouse interactions

9. White Space & Breathing Room
   - Use white space to improve readability and focus
   - Group related items together with consistent spacing
   - Allow content to breathe with adequate margins
   - Use a consistent spacing system (8px grid system recommended)

10. Error Prevention
    - Design interfaces that prevent errors before they occur
    - Provide clear constraints and guidance
    - Use appropriate input controls for data types
    - Confirm destructive actions before executing

Whenever i ask you to start the karyapravah mysql mcp server then read the karyapravah readme file to understand how to use the mysql mcp server to query the database. Donot start creating any additional files to connect to the karyapravah mysql mcp server because all the required files are already present in the karyapravah directory. 